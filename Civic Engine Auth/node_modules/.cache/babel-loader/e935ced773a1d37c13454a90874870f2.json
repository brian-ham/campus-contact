{"ast":null,"code":"var _jsxFileName = \"/Users/pmallick/Desktop/CS50/civicengine/src/pages/ResetPasswordPage.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { Button, chakra, FormControl, FormLabel, Heading, Input, Stack, useToast } from '@chakra-ui/react';\nimport React, { useState } from 'react';\nimport { Card } from '../components/Card';\nimport { Layout } from '../components/Layout';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext'; // A custom hook that builds on useLocation to parse\n// the query string for you.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useQuery() {\n  _s();\n\n  return new URLSearchParams(useLocation().search);\n}\n\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nexport default function ResetPasswordPage() {\n  _s2();\n\n  const {\n    resetPassword\n  } = useAuth();\n  const query = useQuery();\n  const history = useHistory();\n  const [password, setPassword] = useState('');\n  const toast = useToast();\n  console.log(query.get('mode'), query.get('oobCode'));\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      textAlign: \"center\",\n      my: 12,\n      children: \"Reset password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      maxW: \"md\",\n      mx: \"auto\",\n      mt: 4,\n      children: /*#__PURE__*/_jsxDEV(chakra.form, {\n        onSubmit: async e => {\n          e.preventDefault();\n\n          try {\n            await resetPassword(query.get('oobCode'), password);\n            toast({\n              description: 'Password has been changed, you can login now.',\n              status: 'success',\n              duration: 9000,\n              isClosable: true\n            });\n            history.push('/login');\n          } catch (error) {\n            toast({\n              description: error.message,\n              status: 'error',\n              duration: 9000,\n              isClosable: true\n            });\n            console.log(error.message);\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: \"6\",\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            id: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              children: \"New password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"password\",\n              autoComplete: \"password\",\n              required: true,\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            colorScheme: \"pink\",\n            size: \"lg\",\n            fontSize: \"md\",\n            children: \"Reset password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ResetPasswordPage, \"Pbmq8xzT2x51bHXcW/IZuiT3mgQ=\", false, function () {\n  return [useAuth, useQuery, useHistory, useToast];\n});\n\n_c = ResetPasswordPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordPage\");","map":{"version":3,"sources":["/Users/pmallick/Desktop/CS50/civicengine/src/pages/ResetPasswordPage.jsx"],"names":["Button","chakra","FormControl","FormLabel","Heading","Input","Stack","useToast","React","useState","Card","Layout","useHistory","useLocation","useAuth","useQuery","URLSearchParams","search","ResetPasswordPage","resetPassword","query","history","password","setPassword","toast","console","log","get","e","preventDefault","description","status","duration","isClosable","push","error","message","target","value"],"mappings":"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","sourcesContent":["import {\n  Button,\n  chakra,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Stack,\n  useToast,\n} from '@chakra-ui/react'\nimport React, { useState } from 'react'\nimport { Card } from '../components/Card'\nimport { Layout } from '../components/Layout'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useAuth } from '../contexts/AuthContext'\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search)\n}\n\nexport default function ResetPasswordPage() {\n  const { resetPassword } = useAuth()\n  const query = useQuery()\n  const history = useHistory()\n  const [password, setPassword] = useState('')\n  const toast = useToast()\n\n  console.log(query.get('mode'), query.get('oobCode'))\n  return (\n    <Layout>\n      <Heading textAlign='center' my={12}>\n        Reset password\n      </Heading>\n      <Card maxW='md' mx='auto' mt={4}>\n        <chakra.form\n          onSubmit={async e => {\n            e.preventDefault()\n            try {\n              await resetPassword(query.get('oobCode'), password)\n              toast({\n                description: 'Password has been changed, you can login now.',\n                status: 'success',\n                duration: 9000,\n                isClosable: true,\n              })\n              history.push('/login')\n            } catch (error) {\n              toast({\n                description: error.message,\n                status: 'error',\n                duration: 9000,\n                isClosable: true,\n              })\n              console.log(error.message)\n            }\n          }}\n        >\n          <Stack spacing='6'>\n            <FormControl id='password'>\n              <FormLabel>New password</FormLabel>\n              <Input\n                type='password'\n                autoComplete='password'\n                required\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n            </FormControl>\n            <Button type='submit' colorScheme='pink' size='lg' fontSize='md'>\n              Reset password\n            </Button>\n          </Stack>\n        </chakra.form>\n      </Card>\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}